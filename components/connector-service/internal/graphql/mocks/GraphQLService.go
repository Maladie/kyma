// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import graphql "github.com/kyma-project/kyma/components/connector-service/internal/graphql"
import http "net/http"
import io "io"
import mock "github.com/stretchr/testify/mock"
import time "time"

// GraphQLService is an autogenerated mock type for the GraphQLService type
type GraphQLService struct {
	mock.Mock
}

// ReadConfig provides a mock function with given fields: configStream
func (_m *GraphQLService) ReadConfig(configStream io.Reader) (graphql.Config, error) {
	ret := _m.Called(configStream)

	var r0 graphql.Config
	if rf, ok := ret.Get(0).(func(io.Reader) graphql.Config); ok {
		r0 = rf(configStream)
	} else {
		r0 = ret.Get(0).(graphql.Config)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(configStream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRequest provides a mock function with given fields: query, config, timeout
func (_m *GraphQLService) SendRequest(query string, config graphql.Config, timeout time.Duration) (*http.Response, error) {
	ret := _m.Called(query, config, timeout)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, graphql.Config, time.Duration) *http.Response); ok {
		r0 = rf(query, config, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, graphql.Config, time.Duration) error); ok {
		r1 = rf(query, config, timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
